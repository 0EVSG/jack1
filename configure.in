dnl Process this file with autoconf to produce a configure script.
AC_INIT(jackd/jackd.c)

AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_TARGET

dnl ---
dnl HOWTO: updating the JACK version number
dnl
dnl major version = ask on jackit-devel :)
dnl minor version = incremented when any of the public or internal
dnl                 interfaces are changed
dnl micro version = incremented when implementation-only
dnl                 changes are made
dnl ---
JACK_MAJOR_VERSION=0
JACK_MINOR_VERSION=96
JACK_MICRO_VERSION=2

dnl ---
dnl HOWTO: updating the jack protocol version
dnl
dnl increment the protocol version whenever a change is
dnl made to the way libjack communicates with jackd
dnl that would break applications linked with an older
dnl version of libjack.
dnl ---
JACK_PROTOCOL_VERSION=13

dnl ---
dnl HOWTO: updating the libjack interface version
dnl
dnl current = incremented whenever the public libjack API is changed 
dnl revision = incremented when the libjack implementation is changed
dnl age = current libjack is both source and binary compatible with
dnl       libjack interfaces current,current-1,...,current-age
dnl
dnl Note! see libtool documentation for detailed documentation
dnl
dnl Note Also! until we reach CURRENT>=1, the rules are somewhat
dnl slacker than this, and closer to those for the JACK version
dnl number.
dnl ---
JACK_API_CURRENT=0
JACK_API_REVISION=23
JACK_API_AGE=0

AC_SUBST(JACK_MAJOR_VERSION)
AC_SUBST(JACK_MINOR_VERSION)
AC_SUBST(JACK_MICRO_VERSION)

AC_SUBST(JACK_PROTOCOL_VERSION)

AC_SUBST(JACK_API_MAJOR_VERSION)
AC_SUBST(JACK_API_MINOR_VERSION)
AC_SUBST(JACK_API_MICRO_VERSION)

JACK_SO_VERSION=${JACK_API_CURRENT}:${JACK_API_REVISION}:${JACK_API_AGE}

JACK_VERSION=$JACK_MAJOR_VERSION.$JACK_MINOR_VERSION.${JACK_MICRO_VERSION}${BETA}
JACK_RELEASE=$JACK_MAJOR_VERSION-$JACK_MINOR_VERSION-${JACK_MICRO_VERSION}${BETA}

AC_SUBST(JACK_SO_VERSION)
AC_SUBST(JACK_VERSION)
AC_SUBST(JACK_RELEASE)

AM_INIT_AUTOMAKE(jack-audio-connection-kit,${JACK_VERSION})
AM_MAINTAINER_MODE

AM_CONFIG_HEADER(config.h)
AC_ENABLE_STATIC(no)
AC_ENABLE_SHARED(yes)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_LD
AM_PROG_LIBTOOL
AC_PROG_LN_S
AC_C_BIGENDIAN

# configure CPU and OS dependencies for host platform
AC_MSG_CHECKING([platform dependencies])
source $srcdir/config/configure.host
AC_MSG_RESULT([${os_include_dir}, ${cpu_include_dir}])
AC_SUBST(OS_LDFLAGS)
AC_SUBST(os_include_dir)
AC_SUBST(cpu_include_dir)

# config.h
test "x$JACK_THREAD_STACK_TOUCH" = "x" && JACK_THREAD_STACK_TOUCH=1000000
AC_DEFINE_UNQUOTED(JACK_THREAD_STACK_TOUCH,
	[$JACK_THREAD_STACK_TOUCH],
	[Guaranteed size of realtime stack])
if test "x$JACK_DO_NOT_MLOCK" != "x"; then
    AC_DEFINE_UNQUOTED(JACK_DO_NOT_MLOCK,
	[$JACK_DO_NOT_MLOCK],
	[Don't use mlock() or mlockall() functions])
fi
if test "x$JACK_CPP_VARARGS_BROKEN" != "x"; then
    AC_DEFINE_UNQUOTED(JACK_CPP_VARARGS_BROKEN,
	[$JACK_CPP_VARARGS_BROKEN],
	[CPP has a broken varargs implementation])
fi
if test "x$JACK_USE_MACH_THREADS" != "x"; then
    AC_DEFINE_UNQUOTED(JACK_USE_MACH_THREADS,
	[$JACK_USE_MACH_THREADS],
	[Use MACH threads where possible])
fi

# headers
AC_CHECK_HEADERS(string.h strings.h)
AC_CHECK_HEADERS(getopt.h, [], [
    for d in /Developer/SDKs/MacOSX10.3.0.sdk/usr/include/ ; do
	AC_CHECK_HEADERS($d/getopt.h, [], [INCLUDES=-I$d ${INCLUDES}])
    done]
)

# functions
AC_CHECK_FUNC(getopt_long, ,
	AC_MSG_ERROR([GNU getopt is required to build jack]))
AC_CHECK_FUNC(gethostent, , AC_CHECK_LIB(nsl, gethostent))
AC_CHECK_FUNC(setsockopt, , AC_CHECK_LIB(socket, setsockopt))
AC_CHECK_FUNC(connect, , AC_CHECK_LIB(inet, connect))
AC_CHECK_FUNCS(on_exit atexit)
AC_CHECK_FUNCS(posix_memalign)

# look for system support for POSIX shm API
AC_ARG_ENABLE(posix-shm,
	AC_HELP_STRING([--enable-posix-shm], [use POSIX shm API]),
	[TRY_POSIX_SHM=$enableval])
if test "x$TRY_POSIX_SHM" = "xyes"
then
	AC_CHECK_FUNC(shm_open, ,
		AC_CHECK_LIB(rt, shm_open, , [TRY_POSIX_SHM=no]))
fi
AC_MSG_CHECKING([shared memory support])
if test "x$TRY_POSIX_SHM" = "xyes"
then
	AC_MSG_RESULT([POSIX shm_open().])
	AC_DEFINE(USE_POSIX_SHM,1,[Use POSIX shared memory interface])
else
	AC_MSG_RESULT([System V shmget().])
fi

JACK_CORE_CFLAGS="$CFLAGS -I\$(top_builddir)/config -I\$(top_srcdir) \
-I\$(top_builddir) -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -Wall"
JACK_CFLAGS="$JACK_CORE_CFLAGS -g"
JACK_OPT_CFLAGS="$JACK_CORE_CFLAGS -g -march=pentium2 -mcpu=pentium4 -O3 \
-ffast-math -funroll-loops -fprefetch-loop-arrays"

dnl
dnl figure out how best to optimize
dnl JOQ: this should be done via config/configure.hosts
dnl
                                                                                
if test "$target_cpu" = "powerpc"; then
  AC_DEFINE(POWERPC, 1, "Are we running a ppc CPU?")
  altivecLinux=`test -f /proc/cpuinfo && cat /proc/cpuinfo | grep -i altivec >/dev/null`
  if test "$?" = "0"; then
    AC_DEFINE(HAVE_ALTIVEC_LINUX, 1, "Is there Altivec Support ?")
    if test "$gcc_major_version" = "3"; then
dnl -mcpu=7450 does not reliably work with gcc 3.*
      JACK_OPT_CFLAGS="-D_REENTRANT -O2 -mcpu=7400 -maltivec -mabi=altivec"
    else
      JACK_OPT_CFLAGS="-D_REENTRANT -O3 -mcpu=7400"
    fi
  else
    JACK_OPT_CFLAGS="-D_REENTRANT -O3 -mcpu=750 -mmultiple"
  fi
  JACK_OPT_CFLAGS="$OPTIM_FLAGS -mhard-float -mpowerpc-gfxopt"
elif echo $target_cpu | grep "i*86" >/dev/null; then
  cat /proc/cpuinfo | grep mmx >/dev/null
  if test $? = 0; then
    mmx="-mmmx"
  fi
  cat /proc/cpuinfo | grep sse >/dev/null
  if test $? = 0; then
    sse="-msse -mfpmath=sse"
  fi
    cat /proc/cpuinfo | grep 3dnow >/dev/null
  if test $? = 0; then
    dreidnow="-m3dnow"
  fi
  AC_DEFINE(x86, 1, "Nope its intel")
  if test "$target_cpu" = "i586"; then
    JACK_OPT_CFLAGS="-DREENTRANT -O3 -march=i586 -fomit-frame-pointer -ffast-math -funroll-loops -fmove-all-movables"
  elif test "$target_cpu" = "i686"; then
    JACK_OPT_CFLAGS="-D_REENTRANT -O3 -march=i686 -fomit-frame-pointer -ffast-math -funroll-loops -fmove-all-movables"
    if test "$gcc_major_version" = "3"; then
      JACK_OPT_CFLAGS="$OPTIM_FLAGS $mmx $sse $dreidnow"
    fi
  else
    JACK_OPT_CFLAGS="-D_REENTRANT -O3 -fomit-frame-pointer -ffast-math -funroll-loops -fmove-all-movables"
  fi
fi

AC_ARG_ENABLE(optimize,
    [  --enable-optimize       ask the compiler for its best optimizations],
    [ if test "x$enable_optimize" != "xno" ; then
	  JACK_CFLAGS="$JACK_CORE_CFLAGS $JACK_OPT_FLAGS" ;
      fi ])

AC_SUBST(JACK_CFLAGS)

dnl
dnl use JACK_CFLAGS for jackd compilation
dnl 

CFLAGS=$JACK_CFLAGS

AC_ARG_ENABLE(resize,
	AC_HELP_STRING([--enable-resize], [enable buffer resizing]),
	AC_DEFINE(DO_BUFFER_RESIZE,,[Enable buffer resizing])
)

AC_ARG_ENABLE(ensure-mlock,
	AC_HELP_STRING([--enable-ensure-mlock],
		[fail if unable to lock memory]),
	AC_DEFINE(ENSURE_MLOCK,,[Ensure that memory locking succeeds])
)

AC_ARG_ENABLE(debug,
	AC_HELP_STRING([--enable-debug],
		[enable debugging messages in jackd and libjack]),
	AC_DEFINE(DEBUG_ENABLED,,[Enable debugging messages])
)

AC_ARG_ENABLE(timestamps,
	AC_HELP_STRING([--enable-timestamps],
		[allow clients to use the JACK timestamp API]),
	AC_DEFINE(WITH_TIMESTAMPS,,[Enable JACK timestamp API])
)

USE_CAPABILITIES=false

AC_ARG_ENABLE(capabilities,
              [  --enable-capabilities   use libcap to gain realtime scheduling priviledges],
              [ if test "x$enable_capabilities" != "xno" ; then
                    AC_CHECK_LIB(cap, capgetp,
                                 [AC_CHECK_HEADER(sys/capability.h,
                                                  [HAVE_CAPABILITIES=true],
                                                  [AC_MSG_WARN([*** no kernel support for capabilities])
                                                   HAVE_CAPABILITIES=false]
                                  )],
                                 [AC_MSG_WARN([*** no libcap present])
                                  HAVE_CAPABILITIES=false]
                    )
                    if test "x$HAVE_CAPABILITIES" = "xtrue"; then
                        AC_CHECK_PROG(HAVE_CAPABILITIES, md5sum, true, false)
                    fi
                    if test "x$HAVE_CAPABILITIES" = "xfalse"; then
                        AC_MSG_WARN([*** required program md5sum not found])
                    fi
                    if test "x$HAVE_CAPABILITIES" = "xfalse"; then
                        AC_MSG_ERROR([*** Capabilities support not present. Run configure again without --enable-capabilities.])
                    fi
                    USE_CAPABILITIES=true
                    AC_DEFINE(USE_CAPABILITIES,,[Enable POSIX 1.e capabilities support])
                fi
              ]
)

with_oldtrans=yes
AC_ARG_ENABLE(oldtrans,
              [  --disable-oldtrans      remove old transport interfaces],
              [ if test "x$enable_oldtrans" = "xno" ; then
		    with_oldtrans=no
		fi ])
if test "x$with_oldtrans" != "xno" ; then
	AC_DEFINE(OLD_TRANSPORT,,[Include old transport interfaces])
fi

STRIPPED_JACKD=false
AC_ARG_ENABLE(stripped-jackd,
              [  --enable-stripped-jackd strip jack before computing its md5 sum ],
              [ if test "x$USE_CAPABILITIES" != "xtrue" ; then
                    AC_MSG_WARN([*** capabilities not enabled, stripped jackd has no effect])
                elif test "x$enable_stripped_jackd" != "xno"; then
                    STRIPPED_JACKD=true
                fi
              ]
)

# plugins go in the addon dir.

AS_AC_EXPAND(ADDON_DIR,${libdir}/jack)
AC_SUBST(ADDON_DIR)
AC_DEFINE_UNQUOTED(ADDON_DIR,"$ADDON_DIR",[Directory for plugins])

AC_ARG_WITH(html-dir,
            [  --with-html-dir=PATH    where to install the html documentation])

if test "x$with_html_dir" = "x" ; then
    HTML_DIR='${pkgdatadir}'
else
    HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)


# allow specifying default tmpdir
AC_ARG_WITH(default-tmpdir,
            [  --with-default-tmpdir=PATH    where jackd and clients will put tmp files (/tmp)])

if test "x$with_default_tmpdir" = "x" ; then
	DEFAULT_TMP_DIR=/tmp
else
	DEFAULT_TMP_DIR=$with_default_tmpdir
fi

AC_SUBST(DEFAULT_TMP_DIR)
AC_DEFINE_UNQUOTED(DEFAULT_TMP_DIR,"$DEFAULT_TMP_DIR",[Default tmp directory])

# check for barrier functions in the pthreads library
AC_ARG_WITH(barrier,
	AC_HELP_STRING([--without-barrier],
		       [avoid using pthread barrier functions]),
	[ USE_BARRIER=$withval ],
	[ USE_BARRIER="yes" ]
)
if test "x$USE_BARRIER" = "xyes"
then
	AC_CHECK_LIB([pthread], [pthread_barrier_init],
		AC_DEFINE(USE_BARRIER, 1, [Use pthread barrier functions]))
fi

# check which drivers can be built

jack_have_driver="no"

AC_ARG_ENABLE(alsa, [  --disable-alsa          ignore ALSA driver ],
			TRY_ALSA=$enableval , TRY_ALSA=yes ) 
HAVE_ALSA="false"
if test "x$TRY_ALSA" = "xyes"
then
	# check for ALSA >= 0.9
	AC_CHECK_LIB(asound,snd_pcm_drop,
	     [HAVE_ALSA="true"
              ALSA_LIBS=-lasound
              jack_have_driver="yes"
             ], [], [-lm]
	)
	AC_SUBST(ALSA_LIBS)
fi
AM_CONDITIONAL(HAVE_ALSA, $HAVE_ALSA)

AC_ARG_ENABLE(portaudio, [  --disable-portaudio     ignore PortAudio driver ],
			TRY_PORTAUDIO=$enableval , TRY_PORTAUDIO=yes ) 
HAVE_PA="false"
if test "x$TRY_PORTAUDIO" = "xyes"
then
	# check for portaudio V18
	AC_CHECK_LIB(portaudio, Pa_Initialize,
		[ AC_CHECK_HEADERS(portaudio.h,
			[ HAVE_PA="true"
			  PA_LIBS=-lportaudio
			  jack_have_driver="yes"
			])
		], [], [-lm -lpthread])
	AC_SUBST(PA_LIBS)
fi
AM_CONDITIONAL(HAVE_PA, $HAVE_PA)

AC_ARG_ENABLE(oss, [  --disable-oss           ignore OSS driver ],
			TRY_OSS=$enableval , TRY_OSS=yes ) 
HAVE_OSS="false"
if test "x$TRY_OSS" = "xyes"
then
	# check for Open Sound System
	AC_CHECK_HEADER([sys/soundcard.h],
	     [HAVE_OSS="true"
              jack_have_driver="yes"])
fi
AM_CONDITIONAL(HAVE_OSS, $HAVE_OSS)

jack_enable_iec61883="no"
AC_ARG_ENABLE(iec61883,
[  --enable-iec61883       enable the iec61883 driver],[
  case "$enableval" in
    "yes")
      jack_enable_iec61883="yes"
      ;;
    "no")
      ;;
    *)
      AC_MSG_ERROR([must use --enable-iec61883(=yes/no) or --disable-iec61883])
      ;;
  esac
])

if test x$jack_enable_iec61883 != xno; then
	AC_CHECK_LIB(raw1394, raw1394_iso_xmit_init,
		[ AC_CHECK_HEADER(libraw1394/raw1394.h,
			[ HAVE_RAW1394="true"
                          RAW1394_LIBS=-lraw1394
                          jack_have_driver="yes"
			  AC_MSG_WARN([IEC61883 driver is experimental])
			],
			HAVE_RAW1394="false")
		])
else
  HAVE_RAW1394="false"
fi

AC_SUBST(RAW1394_LIBS)
AM_CONDITIONAL(IEC61883, test x$HAVE_RAW1394 = xtrue)
AM_CONDITIONAL(HAVE_RAW1394, $HAVE_RAW1394)

if test x$jack_have_driver = xno; then
  AC_ERROR([No drivers can be built])
fi

# some example-clients need libsndfile
HAVE_SNDFILE=false
PKG_CHECK_MODULES(SNDFILE, sndfile >= 1.0,[HAVE_SNDFILE=true], [true])
if test x$HAVE_SNDFILE = xfalse; then
             AC_MSG_WARN([*** the jackrec example client will not be built])
fi

# on some systems, readline depends on termcap or ncurses, respectively
READLINE_DEPS=""
##AC_CHECK_LIB(termcap, tgetent, [READLINE_DEPS="$READLINE_DEPS -ltermcap"])
##AC_CHECK_LIB(ncurses, tgetent, [READLINE_DEPS="$READLINE_DEPS -lncurses"])
AC_CHECK_LIB(readline, readline,
             [HAVE_READLINE=true], [HAVE_READLINE=false], [$READLINE_DEPS]
)
if test x$HAVE_READLINE = xfalse; then
	AC_MSG_WARN([*** the jack_transport example client will not be built])
fi
AC_SUBST(READLINE_DEPS)

# you need doxygen to make dist.
AC_CHECK_PROG(HAVE_DOXYGEN, doxygen, true, false)
if test $HAVE_DOXYGEN = "false"; then
             AC_MSG_WARN([*** doxygen not found, docs will not be built])
fi

AM_CONDITIONAL(HAVE_SNDFILE, $HAVE_SNDFILE)
AM_CONDITIONAL(HAVE_READLINE, $HAVE_READLINE)
AM_CONDITIONAL(HAVE_DOXYGEN, $HAVE_DOXYGEN)
AM_CONDITIONAL(USE_CAPABILITIES, $USE_CAPABILITIES)
AM_CONDITIONAL(STRIPPED_JACKD, $STRIPPED_JACKD)

AC_OUTPUT(
Makefile
config/Makefile
config/sysdeps/Makefile
doc/Makefile
doc/reference.doxygen
drivers/Makefile
drivers/alsa/Makefile
drivers/dummy/Makefile
drivers/iec61883/Makefile
drivers/oss/Makefile
drivers/portaudio/Makefile
example-clients/Makefile
jack.pc
jack.spec
jack/Makefile
jack/version.h
jackd/Makefile
jackd/jackd.1
libjack/Makefile
)
